package com.malsolo.crypto.criptography.simetrickey;

import com.malsolo.crypto.util.Utils;
import org.bouncycastle.util.Strings;
import org.bouncycastle.util.encoders.Hex;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class AESinGCMmode {

    /**
     * Encrypt the passed in data pText using GCM with the passed in parameters.
     *
     * @param key secret key to use.
     * @param iv the IV to use with GCM.
     * @param tagLen the length of the MAC to be generated by GCM.
     * @param plainText the plain text input to the cipher.
     * @return the cipher text.
     */
    static byte[] gcmEncrypt(SecretKey key, byte[] iv, int tagLen, byte[] plainText) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding", "BC");

        GCMParameterSpec spec = new GCMParameterSpec(tagLen, iv);

        cipher.init(Cipher.ENCRYPT_MODE, key, spec);

        return cipher.doFinal(plainText);

    }

    /**
     * Decrypt the cipher text cText using the passed in key and other
     * parameters.
     *
     * @param key secret key to use.
     * @param iv the IV to use with GCM.
     * @param tagLen the length of the MAC previously generated by GCM.
     * @param cText the encrypted cipher text.
     * @return the original plain text.
     */
    static byte[] gcmDecrypt(SecretKey key, byte[] iv, int tagLen, byte[] cText) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding", "BC");

        GCMParameterSpec spec = new GCMParameterSpec(tagLen, iv);

        cipher.init(Cipher.DECRYPT_MODE, key, spec);

        return cipher.doFinal(cText);
    }

    public static void main(String[] args) throws Exception {
        Utils.installBouncyCastleProvider();

        byte[] keyBytes = Hex.decode("000102030405060708090a0b0c0d0e0f");

        SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");

        byte[] plainText = Strings.toByteArray("hello, world!");

        System.out.printf("plain: %s\n", Hex.toHexString(plainText));

        byte[] iv = Hex.decode("bbaa99887766554433221100");

        byte[] encryptedText = gcmEncrypt(key, iv, 128, plainText);

        System.out.printf("encrypted: %s\n", Hex.toHexString(encryptedText));

        byte[] plainTextDecrypted = gcmDecrypt(key, iv, 128, encryptedText);

        System.out.printf("decrypted: %s\n", Hex.toHexString(plainTextDecrypted));

        System.out.println(new String(plainTextDecrypted));

    }
}
